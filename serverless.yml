service: letsencrypt-lambda

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk
    packager: 'yarn'
  config:
    bucketName: ${file(./config.json):bucketName}
    region: ${file(./config.json):region}
    domainName: ${file(./config.json):route53DomainName}
    tagApplication: ${file(./config.json):tagApplication}
    tagOwner: ${file(./config.json):tagOwner}
    topicArn: ${file(./config.json):topicArn}

provider:
  name: aws
  runtime: nodejs18.x
  versionFunctions: false
  memorySize: 512
  logRetentionInDays: 30
  region: ${self:custom.config.region}
  profile: serverless-admin-profile
  iam:
    role: MyRole
  tags:
    application: ${self:custom.config.tagApplication}
    owner: ${self:custom.config.tagOwner}
  stackTags:
    application: ${self:custom.config.tagApplication}
    owner: ${self:custom.config.tagOwner}
  deploymentBucket:
    blockPublicAccess: true
    tags:
      application: ${self:custom.config.tagApplication}
      owner: ${self:custom.config.tagOwner}

functions:
  renewCertificates:
    handler: src/main.renewCertificates
    name: renew-certificates
    timeout: 180
    events:
      - schedule: rate(5 days)
  revokeCertificate:
    handler: src/main.revokeCertificate
    name: revoke-certificate

resources:
  Resources:
    MyRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: letsencrypt-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: letsencrypt-lambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # Allow slack notification via the alerter topic
                  Action:
                    - sns:Publish
                  Resource: ${self:custom.config.topicArn}
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: 'Allow'
                  Action:
                    - 's3:GetObject'
                    - 's3:ListBucket'
                  Resource:
                    - Fn::Join:
                        - ''
                        - - 'arn:aws:s3:::'
                          - Ref: LetsEncryptLambdaBucket
                          - '/*'
                    - Fn::GetAtt:
                        - LetsEncryptLambdaBucket
                        - Arn
                - Effect: 'Allow'
                  Action:
                    - 's3:PutObject'
                    - 's3:PutObjectTagging'
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: LetsEncryptLambdaBucket
                        - '/*'
                - Effect: 'Allow'
                  Action:
                    - 'route53:GetChange'
                    - 'route53:ListHostedZones'
                    - 'route53:ListResourceRecordSets'
                    - 'route53:ChangeResourceRecordSets'
                  Resource: '*'
                - Effect: 'Allow'
                  Action:
                    - 'acm:ImportCertificate'
                    - 'acm:ListCertificates'
                    - 'acm:DescribeCertificate'
                    - 'acm:AddTagsToCertificate'
                    - 'acm:GetCertificate'
                    - 'acm:ListTagsForCertificate'
                  Resource: '*'
        Tags:
          - Key: application
            Value: ${self:custom.config.tagApplication}
          - Key: owner
            Value: ${self:custom.config.tagOwner}
    LetsEncryptChallengeRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Sub '${self:custom.config.domainName}.'
        Name: !Sub '_acme-challenge.${self:custom.config.domainName}.'
        Comment: DNS Challenge Record
        Type: TXT
        TTL: '60'
        ResourceRecords:
          - '"dummy"'
    LetsEncryptLambdaBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.config.bucketName}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        Tags:
          - Key: application
            Value: ${self:custom.config.tagApplication}
          - Key: owner
            Value: ${self:custom.config.tagOwner}
    LetsEncryptLambdaBucketPolicy:
      DependsOn:
        - LetsEncryptLambdaBucket
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref LetsEncryptLambdaBucket
        PolicyDocument:
          Statement:
            - Action: 's3:PutObject'
              Condition:
                'Null':
                  's3:x-amz-server-side-encryption': true
              Effect: Deny
              Principal: '*'
              Resource: !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyPublishingUnencryptedResources
            - Action: 's3:PutObject'
              Condition:
                'ForAllValues:StringNotEquals':
                  's3:x-amz-server-side-encryption':
                    - AES256
                    - 'aws:kms'
              Effect: Deny
              Principal: '*'
              Resource: !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyIncorrectEncryptionHeader
            - Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Condition:
                Bool:
                  'aws:SecureTransport': false
              Effect: Deny
              Principal: '*'
              Resource: !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyUnencryptedConnections
            - Action:
                - 's3:PutBucketAcl'
                - 's3:PutObject'
                - 's3:PutObjectAcl'
              Condition:
                StringEquals:
                  's3:x-amz-acl':
                    - authenticated-read
                    - public-read
                    - public-read-write
              Effect: Deny
              Principal: '*'
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}'
                - !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyPublicReadAcl
            - Action:
                - 's3:PutBucketAcl'
                - 's3:PutObject'
                - 's3:PutObjectAcl'
              Condition:
                StringLike:
                  's3:x-amz-grant-read':
                    - '*http://acs.amazonaws.com/groups/global/AllUsers*'
                    - '*http://acs.amazonaws.com/groups/global/AuthenticatedUsers*'
              Effect: Deny
              Principal: '*'
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}'
                - !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyGrantingPublicRead
