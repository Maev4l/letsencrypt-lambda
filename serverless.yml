service: letsencrypt-lambda

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk
    packager: 'yarn'
  config:
    bucketName: ${file(./config.json):bucketName}
    region: ${file(./config.json):region}
    tagApplication: ${file(./config.json):tagApplication}
    tagOwner: ${file(./config.json):tagOwner}

provider:
  name: aws
  runtime: nodejs14.x
  versionFunctions: false
  memorySize: 512
  region: ${self:custom.config.region}
  profile: serverless-admin-profile
  # >>> Enable Gzip compression on AWS APi Gateway
  #apiGateway:
  #  minimumCompressionSize: 1024 # in bytes
  # <<< Enable Gzip compression on AWS APi Gateway
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:GetObject'
        - 's3:ListBucket'
      Resource:
        - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: LetsEncryptLambdaBucket
              - '/*'
        - Fn::GetAtt:
            - LetsEncryptLambdaBucket
            - Arn
    - Effect: 'Allow'
      Action:
        - 's3:PutObject'
        - 's3:PutObjectTagging'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: LetsEncryptLambdaBucket
            - '/*'
    - Effect: 'Allow'
      Action:
        - 'route53:GetChange'
        - 'route53:ListHostedZones'
        - 'route53:ListResourceRecordSets'
        - 'route53:ChangeResourceRecordSets'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 'acm:ImportCertificate'
        - 'acm:ListCertificates'
        - 'acm:DescribeCertificate'
        - 'acm:AddTagsToCertificate'
      Resource: '*'

  tags:
    application: ${self:custom.config.tagApplication}
    owner: ${self:custom.config.tagOwner}
  stackTags:
    application: ${self:custom.config.tagApplication}
    owner: ${self:custom.config.tagOwner}
  deploymentBucket:
    blockPublicAccess: true
    tags:
      application: ${self:custom.config.tagApplication}
      owner: ${self:custom.config.tagOwner}

package:
  exclude:
    - .vscode/**
    - .travis.yml
    - coverage/**
    - test/**
    - scripts/**

functions:
  renewCertificates:
    handler: src/main.renewCertificates
    name: renew-certificates
    timeout: 120
    #events:
    #  - schedule: rate(1 day)

resources:
  Resources:
    LetsEncryptLambdaBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.config.bucketName}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
    LetsEncryptLambdaBucketPolicy:
      DependsOn:
        - LetsEncryptLambdaBucket
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref LetsEncryptLambdaBucket
        PolicyDocument:
          Statement:
            - Action: 's3:PutObject'
              Condition:
                'Null':
                  's3:x-amz-server-side-encryption': true
              Effect: Deny
              Principal: '*'
              Resource: !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyPublishingUnencryptedResources
            - Action: 's3:PutObject'
              Condition:
                'ForAllValues:StringNotEquals':
                  's3:x-amz-server-side-encryption':
                    - AES256
                    - 'aws:kms'
              Effect: Deny
              Principal: '*'
              Resource: !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyIncorrectEncryptionHeader
            - Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Condition:
                Bool:
                  'aws:SecureTransport': false
              Effect: Deny
              Principal: '*'
              Resource: !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyUnencryptedConnections
            - Action:
                - 's3:PutBucketAcl'
                - 's3:PutObject'
                - 's3:PutObjectAcl'
              Condition:
                StringEquals:
                  's3:x-amz-acl':
                    - authenticated-read
                    - public-read
                    - public-read-write
              Effect: Deny
              Principal: '*'
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}'
                - !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyPublicReadAcl
            - Action:
                - 's3:PutBucketAcl'
                - 's3:PutObject'
                - 's3:PutObjectAcl'
              Condition:
                StringLike:
                  's3:x-amz-grant-read':
                    - '*http://acs.amazonaws.com/groups/global/AllUsers*'
                    - '*http://acs.amazonaws.com/groups/global/AuthenticatedUsers*'
              Effect: Deny
              Principal: '*'
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}'
                - !Sub 'arn:${AWS::Partition}:s3:::${LetsEncryptLambdaBucket}/*'
              Sid: DenyGrantingPublicRead
